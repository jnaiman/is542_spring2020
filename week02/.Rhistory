source('~/Dropbox/teaching/stats_spring_2020/week02/util_format_class_survey_data_for_upload.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/util_format_class_survey_data_for_upload.R')
install.packages("readtext")
source('~/Dropbox/teaching/stats_spring_2020/week02/util_format_class_survey_data_for_upload.R')
# Class Notes #2, Part 1 - Play with Class Survey results
# now we are going to continue to learn about how to read and look
# at data in R, again we are starting slow!
classData = read.csv("~/Downloads/formatted_class_answers.csv")
# lets make a vector of the different languages folks use
languages = classData[,5]
# can also ask for the "levels" of these catagories
print(levels(languages))
source('~/Dropbox/teaching/stats_spring_2020/week02/util_format_class_survey_data_for_upload.R')
# Class Notes #2, Part 1 - Play with Class Survey results
# now we are going to continue to learn about how to read and look
# at data in R, again we are starting slow!
classData = read.csv("~/Downloads/formatted_class_answers.csv")
# lets make a vector of the different languages folks use
languages = classData[,5]
# can also ask for the "levels" of these catagories
print(levels(languages))
classData = read.csv("~/Downloads/formatted_class_answers.csv")
# lets make a vector of the different languages folks use
languages = classData[,5]
# can also ask for the "levels" of these catagories
print(levels(languages))
# now we are going to continue to learn about how to read and look
# at data in R, again we are starting slow!
classData = read.csv("~/Downloads/formatted_class_answers.csv")
# lets make a vector of the different languages folks use
languages = classData[,5]
# can also ask for the "levels" of these catagories
print(levels(languages))
hist(languages) # should produce an error since "languages" is NOT a count - its a bunch of strings
table(languages) # shows how many "hits" for a specific language
hist(table(languages)) # plots something now, but is actually counting # of bottom level, not counts
# compare this plot to
barplot(table(languages)) # which sort of does what we want
# Note: there are some long strings that aren't showing
# we can try changing one:
classData = read.csv("~/Downloads/formatted_class_answers.csv")
# lets make a vector of the different languages folks use
languages = classData[,5]
# can also ask for the "levels" of these catagories
print(levels(languages))
hist(languages) # should produce an error since "languages" is NOT a count - its a bunch of strings
# instead, we can play some tricks
table(languages) # shows how many "hits" for a specific language
hist(table(languages)) # plots something now, but is actually counting # of bottom level, not counts
# compare this plot to
barplot(table(languages)) # which sort of does what we want
print(levels(languages)[2]) # let's replace this
levels(languages)[2] = "Python"
# now what does it look like?
levels(languages)
barplot(table(languages)) # which sort of does what we want
barplot(table(languages),ylab='Counts')
# count 3 different answers
barplot(table(languages),ylab='Counts',col=c("red","blue","green"))
time_in = classData[,6]
barplot(table(time_in)) # note: you will probably have to expand the x-axis window
# lets reformat this data a bit!
time_min = c() # storage
time_max = c() # storage
# lets look at the options again
myLevels = levels(time_in)
print(myLevels)
# lets do a for loop and determine bins by hand:
for (i in 1:length(time_in)){
# note we can also do: time_in[i] == '< 6 months'
if (time_in[i] == myLevels[1]){ # < 6 months
time_min = c(time_min,0)
time_max = c(time_max, 0.5) # in years => 0.5 years = 6 months
} else if (time_in[i] == myLevels[2]) { # 1-2 years
time_min = c(time_min, 1.0)
time_max = c(time_max, 2.0)
} else if (time_in[i] == myLevels[3]) {
time_min = c(time_min, 2.0)
time_max = c(time_max, 4.0)
} else {
time_min = c(time_min,0.5)
time_max = c(time_max,1.0)
}
}
# lets say the mid-point of this data is the time
time = 0.5*(time_min+time_max)
hist(time)
hist(time,breaks=c(0.0,0.5,1,2,4))
help(hist)
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
# lets look at some summary stats for our data for how long folks have been programming
summary(time)
# lets over plot where these are
abline(v = mean(time), col = "blue", lwd = 2)
abline(v = median(time), col = "red", lwd = 2)
# lets add a legend
legend("topright",c("Mean","Median"),col=c("blue","red"),lwd=2)
# something to think about - does the mean or median describe the distribution better here?
# what do they mean if the box sizes are different?
# now lets say we add the data of an old person in like myself that has
#  been programming for a bit
new_time = c(time,15.0)
# lets overplot the mean and median of our new time on our old histogram
abline(v=mean(new_time),col="blue",lwd=4,lty=2)
abline(v=median(new_time),col="red",lwd=4,lty=2)
barplot(table(languages),ylab='Counts',col=c("red","blue","green"))
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
summary(time)
# lets over plot where these are
abline(v = mean(time), col = "blue", lwd = 2)
abline(v = median(time), col = "red", lwd = 2)
# lets add a legend
legend("topright",c("Mean","Median"),col=c("blue","red"),lwd=2)
# something to think about - does the mean or median describe the distribution better here?
# now lets say we add the data of an old person in like myself that has
#  been programming for a bit
new_time = c(time,15.0)
# lets overplot the mean and median of our new time on our old histogram
abline(v=mean(new_time),col="blue",lwd=4,lty=2)
abline(v=median(new_time),col="red",lwd=4,lty=2)
# lets try the same exercise with the standdard deviation
# first, lets replot our histogram
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
# lets add a horizontal line that shows the standard dev at the height of the plot
lines(c(mean(time)-0.5*sd(time),mean(time)+0.5*sd(time)),c(2,2), col="blue",lwd=2)
# lets add the 25th & 75th quantiles
lines(c(median(time)-0.5*IQR(time),median(time)+0.5*IQR(time)), c(1.5,1.5), col="red",lwd=2)
# again, lets add a little legend
legend("bottomright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
IQR(time)
summary(time)
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
# lets add a horizontal line that shows the standard dev at the height of the plot
# NOTE: I'm just doing 1/2 STDDEV around the mean for plotting purposes.
#  Usually (and later on in class) we'll talk about full STDDEV's around the mean.
lines(c(mean(time)-0.5*sd(time),mean(time)+0.5*sd(time)),c(2,2), col="blue",lwd=2)
# lets add the 25th & 75th quantiles
lines(c(median(time)-0.5*IQR(time),median(time)+0.5*IQR(time)), c(1.5,1.5), col="red",lwd=2)
# again, lets add a little legend
legend("bottomright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
# so, lets see how both of these change with adding my data point
lines(c(mean(new_time)-0.5*sd(new_time),mean(new_time)+0.5*sd(new_time)),
c(2,2), col="blue",lwd=4, lty=2)
lines(c(median(new_time)-0.5*IQR(new_time),median(new_time)+0.5*IQR(new_time)),
c(1.5,1.5), col="red",lwd=2,lty=2)
legend("bottomright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
# lets add a horizontal line that shows the standard dev at the height of the plot
# NOTE: I'm just doing 1/2 STDDEV around the mean for plotting purposes.
#  Usually (and later on in class) we'll talk about full STDDEV's around the mean.
lines(c(mean(time)-0.5*sd(time),mean(time)+0.5*sd(time)),c(2,2), col="blue",lwd=2)
# lets add the 25th & 75th quantiles
lines(c(median(time)-0.5*IQR(time),median(time)+0.5*IQR(time)), c(1.5,1.5), col="red",lwd=2)
# again, lets add a little legend
legend("bottomright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
# so, lets see how both of these change with adding my data point
lines(c(mean(new_time)-0.5*sd(new_time),mean(new_time)+0.5*sd(new_time)),
c(2,2), col="blue",lwd=4, lty=2)
lines(c(median(new_time)-0.5*IQR(new_time),median(new_time)+0.5*IQR(new_time)),
c(1.5,1.5), col="red",lwd=2,lty=2)
# if STDDEV lines over lay on legend, replot
#legend("bottomright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
hist(time,breaks=c(0.0,0.5,1,2,4),freq=TRUE)
# lets add a horizontal line that shows the standard dev at the height of the plot
# NOTE: I'm just doing 1/2 STDDEV around the mean for plotting purposes.
#  Usually (and later on in class) we'll talk about full STDDEV's around the mean.
lines(c(mean(time)-0.5*sd(time),mean(time)+0.5*sd(time)),c(2,2), col="blue",lwd=2)
# lets add the 25th & 75th quantiles
lines(c(median(time)-0.5*IQR(time),median(time)+0.5*IQR(time)), c(1.5,1.5), col="red",lwd=2)
# again, lets add a little legend
legend("topright",c("STDDEV","Quartiles"),col=c("blue","red"),lwd=2)
# so, lets see how both of these change with adding my data point
lines(c(mean(new_time)-0.5*sd(new_time),mean(new_time)+0.5*sd(new_time)),
c(2,2), col="blue",lwd=4, lty=2)
lines(c(median(new_time)-0.5*IQR(new_time),median(new_time)+0.5*IQR(new_time)),
c(1.5,1.5), col="red",lwd=2,lty=2)
# write out file
write.csv(newData, file = "/Users/jillnaiman/Dropbox/teaching/stats_spring_2020/week02/formatted_class_answers_orig_orig.csv")
source('~/Dropbox/teaching/stats_spring_2020/week02/util_format_class_survey_data_for_upload.R')
View(classData)
View(classData)
# We can make a dotchart of the programming time range
dotchart(time,xlab="Programming Age")
# we can sort of see that there are a lot of dots ~<1year, and a few at 3years
# note here: y-axis means nothing
boxplot(time)
boxplot(time,ylab="Programming Age")
boxplot(time,new_time, col=c("green","purple"))
legend("topleft",c("Programming Age","New Programming Age"),fill=c("green","purple"))
source('~/Dropbox/teaching/stats_spring_2020/week02/class_notes_classData_week02_part1.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/starter_Rfile_fishData_week02.R')
fishdata = read.csv("~/Downloads/undata_fish_2020.csv")
# make some vectors, first country:
country = fishdata[,1]
# how about year of data?
year = fishdata[,2]
# how about type of fish
type = fishdata[,3]
# how about transaction type? (import, export, re-export/import)
transaction = fishdata[,4]
# how about the cash amount of the transaction?
trade_usd = fishdata[,5]
# how about the weight of the fish in kg?
weight = fishdata[,6]
# how about the quantity name?
quant_name = fishdata[,7]
# looks like some of of the "quantity" measures are weight, or # of items, or nothing
# The first step here is to explore our dataset - let's look at one vector at a time:
# Country of each case:
barplot(table(country)) # note: if you stretch the plot window you see more/less data
# what are the different countries?
print(levels(country))
barplot(table(year))
barplot(table(type))
levels(type)
barplot(table(transaction))
hist(trade_usd)
print(trade_usd)
hist(trade_usd/1000., xlab='Trade in $1000 USD')
print(summary(trade_usd))
hist(log10(trade_usd))
hist(weight)
print(summary(weight))
hist(log10(weight))
levels(quant_name)
table(quant_name)
mask = country=="Croatia" # Feel feel to pick your own country! recall: print(levels(country)) to take a look
trade_usd_croatia = subset(trade_usd,mask)
hist(trade_usd_croatia)
hist(log10(trade_usd_croatia))
mask = (country=="Croatia") & (quant_name == "Weight in kilograms")
hist(log10(trade_usd_croatia_kg),col=rgb(1,0,0),add=T)
mask = (country=="Croatia") & (quant_name == "Weight in kilograms")
trade_usd_croatia_kg = subset(trade_usd,mask)
hist(log10(trade_usd_croatia_kg),col=rgb(1,0,0),add=T)
mask = (country=="Croatia") & (quant_name == "Weight in kilograms") & (transaction == "Import")
trade_usd_croatia_kg_import = subset(trade_usd,mask)
hist(log10(trade_usd_croatia_kg_import),col=rgb(0,0,1),add=T)
legend("topleft",c("Croatian Trade","Croatian Trade (kg)", "Croatian Imports (kg)"),
fill=c(rgb(1,1,1),rgb(1,0,0),rgb(0,0,1)))
print(summary(trade_usd_croatia))
print(summary(trade_usd_croatia_kg))
# let's also finally compare the imports to the exports from Croatia
mask = (country=="Croatia") & (quant_name == "Weight in kilograms") & (transaction == "Export")
trade_usd_croatia_kg_export = subset(trade_usd,mask)
hist(log10(trade_usd_croatia_kg_export),col=rgb(0,1,0),add=T)
# and, obviously, update our legend:
legend("topleft",c("Croatian Trade","Croatian Trade (kg)",
"Croatian Imports (kg)", "Croatian Exports (kg)"),
fill=c(rgb(1,1,1),rgb(1,0,0),rgb(0,0,1),rgb(0,1,0)))
# By eye we can see that they seem like the mean/medians might be different
#  but let's use summary to see:
print('IMPORTS')
print(summary(trade_usd_croatia_kg_import))
print('EXPORTS')
print(summary(trade_usd_croatia_kg_export))
print(sd(trade_usd_croatia_kg_import))
print(sd(trade_usd_croatia_kg_export))
mask = (country=="Croatia") & (quant_name == "Weight in kilograms") & (transaction == "Import")
year_croatia_import_kg = subset(year, mask)
plot(year_croatia_import_kg,trade_usd_croatia_kg_import,
xlab="Year",ylab="Import Trade in USD in Croatia")
print(fishdata)
mask = (fishdata$Country.or.Area == "Croatia") & (fishdata$Quantity.Name == "Weight in kilograms") & (fishdata$Flow == "Import")
croatianImports = subset(fishdata,mask)
print(croatianImports)
head(fishdata)
head(croatianImports)
tradeUSD_by_year = aggregate(Trade..USD. ~ Year, data=croatianImports, sum)
plot(tradeUSD_by_year$Year, tradeUSD_by_year$Trade..USD.)
myfit = lm(tradeUSD_by_year$Trade..USD. ~ tradeUSD_by_year$Year)
abline(myfit, col='blue')
plot(tradeUSD_by_year$Year, tradeUSD_by_year$Trade..USD.)
# read and process data
#txtfile=readtext("~/Downloads/introAVoid.txt") # note: the "~/" here means "home directory"
# or try:
txtfile = readtext::readtext("~/Downloads/introAVoid.txt")
twords = strsplit(txtfile[,2],split=" ") # split by spaces into words
# dataframe => vector
words = twords[[1]]
# take out punctuation
for (i in 1:length(words)) {
# look for specific punctuation
# 1 => .
if (grepl("\\.",words[i])){ # if this punctuation is in the word
words[i] = gsub(".","",words[i]) # replace it with an empty character
}
# 2 => ,
if (grepl(",",words[i])){
words[i] = gsub(",","",words[i])
}
# 3 => )
if (grepl("\\)",words[i])){
words[i] = gsub(")","",words[i])
}
# 4 => (
if (grepl("\\(",words[i])){
words[i] = gsub("\\(","",words[i])
}
}
number_of_characters = nchar(words)
# (2) Below is an example of how to count occurances of a character in each word
#  feel free to change things
# (2.i) A useful function: define a function to find the number of a certain character
countCharOccurrences <- function(char, s) {
if (length(char) > 1) { # we have a vector (words)
v = rep(0,length(char))
for (i in 1:length(char)) {
s2 <- gsub(char[i],"",s)
v[i] = (nchar(s) - nchar(s2))
}
} else { # other wise, we only have one word
s2 <- gsub(char,"",s)
v = (nchar(s) - nchar(s2))
}
return (v)
}
# (2.ii) example: count occurances of "a" and "b" in a word
num_a = countCharOccurrences("a",words)
# total number of "a"'s in this piece
total_a = sum(num_a)
num_b = countCharOccurrences("b",words)
# total number of "a"'s in this piece
total_b = sum(num_b)
# plot and compare
barplot(c(total_a,total_b),names.arg=c("a","b"),xlab="Character",ylab="Frequency in Text")
source('~/.active-rstudio-document')
classData
head(classData)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
languages
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
levels(languages)
levels(languages)[2]
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
languages
table(languages)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
time_in
table(time_in)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
levels(time_in)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
length(time_in)
time_in[1]
time_in[2]
levels(time_in)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
time_min
time_max
myLevels
myLevels[1]
myLevels[2]
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
time_min
time_max
myLevels[3]
myLevels[4]
myLevels[5]
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
time_min
time_max
length(time_min)
length(time_max)
length(time_in)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
summary(time)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
# in our case, we don't care about preserving the area of our bins
hist(time, breaks=c(0.0, 0.5, 1, 2, 4, 5), freq=TRUE)
print(summary(time))
# so let's see if our plot matches up with our stats
abline(v=mean(time), col="blue", lwd=2) # blue line = mean
abline(v=median(time), col="red", lwd=2) # red line = median
# legend
legend("topright", c("Mean", "Median"), col=c("blue", "red"), lwd=2)
# in our case, we don't care about preserving the area of our bins
hist(time, breaks=c(0.0, 0.5, 1, 2, 4, 5), freq=TRUE)
print(summary(time))
# so let's see if our plot matches up with our stats
abline(v=mean(time), col="blue", lwd=2) # blue line = mean
abline(v=median(time), col="red", lwd=2) # red line = median
# legend
legend("topright", c("Mean", "Median"), col=c("blue", "red"), lwd=2)
new_time = c(time, 15.0) # adding a new data point to our time dataset
abline(v=mean(new_time), col="blue", lwd=2, lty=2) # blue line = mean
abline(v=median(new_time), col="red", lwd=2, lty=2) # red line = median
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part1_studentData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
table(country)
levels(country)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
levels(type)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
summary(trade_usd)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
country
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
trade_usd
trade_usd_croatia
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
levels(quant_name)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
levels(transaction)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
head(croatianImports)
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
tradeUSD_in_croatia_by_year
source('~/Dropbox/teaching/stats_spring_2020/week02/inClass_part2_fishData_week02.R')
country
transaction
View(fishdata)
