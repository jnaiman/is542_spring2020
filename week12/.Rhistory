install.packages(c("car", "corrplot", "effects", "psych"))
par(mfrow=c(1,1))
# first, lets recall last week, our linear model for blood alcohol level vs. #
#  of beers drank
# read in data
BB <- read.csv("http://www.math.montana.edu/courses/s217/documents/beersbac.csv")
#print(BB)
Beers = BB$Beers
BAC = BB$BAC
plot(Beers, BAC, pch=16, col=30)
install.packages("psych") # run once
#install.packages("psych") # run once
require(psych)
snotel_s = read.csv("~/Downloads/snotel_s.csv")
snotel2 = snotel_s[,c(1:2,4:6,3)] #Reorders columns for nicer pairs.panel display
pairs.panels(snotel2[,-c(1:2)], ellipse=F,
main="Scatterplot matrix of SNOTEL Data", lm=TRUE)
# Let's start by naively assuming we can model snow depth with
# one of the variables, and look at this more closely
par(mfrow=c(3,1))
m1 = lm(Snow.Depth~Elevation, data=snotel2)
m2 = lm(Snow.Depth~Min.Temp, data=snotel2)
m3 = lm(Snow.Depth~Max.Temp, data=snotel2)
plot(snotel2$Elevation, snotel2$Snow.Depth, xlab='Elevation in feet', ylab='Snow Depth in inches')
abline(m1, col="blue")
plot(snotel2$Min.Temp, snotel2$Snow.Depth, xlab='Min. Temp. in F', ylab='Snow Depth in inches')
abline(m2, col="red")
plot(snotel2$Max.Temp, snotel2$Snow.Depth, xlab='Max. Temp. in F', ylab='Snow Depth in inches')
abline(m3, col="green")
# we can also look at summaries of each of these fits
print(summary(m1))
print(summary(m2))
print(summary(m3))
mfull = lm(Snow.Depth~Elevation+Min.Temp+Max.Temp, data=snotel2)
print(summary(mfull))
# so, lets look at some plots!
install.packages("effects") # run once
require(effects)
plot(allEffects(mfull), main="MLR model with Elev, Min & Max Temps")
print(summary(m3))
print(summary(mfull))
par(mfrow=c(2,2))#, oma=c(0,0,2,0))
plot(mfull, sub.caption='Diagnostics for our MLR Fit')
# Checking out the residuals vs. leverage
#   we see that there is possibly 1 leveraging outlier, point - point 9.
# We can print out this point to see what it is:
print(snotel2[c(9),])
# lets compare to what the result should be
print(mfull)
intercept = mfull$coefficients[1]
elevation = mfull$coefficients[2]
minTemp = mfull$coefficients[3]
maxTemp = mfull$coefficients[4]
# Let's grab the data:
outlier_9th = snotel2[c(9),]
# And also what would we predict with our model?
result_9th = intercept + elevation*outlier_9th$Elevation +
minTemp*outlier_9th$Min.Temp + maxTemp*outlier_9th$Max.Temp
# Let's calculate our residual by hand:
residual_9th = result_9th - outlier_9th$Snow.Depth
print(residual_9th)
# While we should be very very careful about removing outliers, let us
#   proceed in good faith that this is indeed a wonky point and remove it & refit
mfull_take2 <- lm(Snow.Depth~Elevation+Min.Temp+Max.Temp, data=snotel2[-9,])
print(summary(mfull_take2))
# ok, lets take a look
plot(allEffects(mfull_take2), main="MLR model with NE Ent. Removed")
pairs.panels(snotel2[-9,-c(1:2)], ellipse=F,
main="Scatterplot matrix of SNOTEL Data", lm=TRUE)
# lets look at this in a bit more detail with a pretty graph
install.packages(corrplot) # run once
# lets look at this in a bit more detail with a pretty graph
install.packages("corrplot") # run once
par(mfrow=c(1,1), oma=c(0,0,1,0))
corrplot.mixed(cor(snotel2[-9,-c(1:2)]), upper.col=c(1, "orange"),
lower.col=c(1, "orange"))
round(cor(snotel2[-c(9,22),3:6]),2)
corrplot.mixed(cor(snotel2[-9,-c(1:2)]), upper.col=c(1, "orange"),
lower.col=c(1, "orange"))
require(corrplot)
par(mfrow=c(1,1), oma=c(0,0,1,0))
corrplot.mixed(cor(snotel2[-9,-c(1:2)]), upper.col=c(1, "orange"),
lower.col=c(1, "orange"))
round(cor(snotel2[-c(9,22),3:6]),2)
install.packages("car") # run once
# Let's look at vifs of our last fit
#install.packages("car") # run once
require(car)
print(vif(mfull_take2))
print(sqrt(vif(mfull_take2)))
elev = lm(Elevation~Min.Temp+Max.Temp, data=snotel2[-9,])
print(summary(elev))
print(vif(mfull_take2)[1])
vifEl = 1.0/(1.0-summary(elev)$r.squared)
print(vifEl)
# A1:
m_less <- lm(Snow.Depth~Min.Temp+Max.Temp, data=snotel2)
print(summary(m_less))
m_less2 <- lm(Snow.Depth~Elevation+Max.Temp, data=snotel2)
print(summary(m_less2))
# Q2: Redo the full fit analysis for high elevation data:
snotel3 = subset(snotel2, snotel2$Elevation < 6500)
# what changes?  Does this make sense with your intuition?
#  use pairs.panels & corrplot to visualize this
#
# A2:
pairs.panels(snotel3[,-c(1:2)], ellipse=F,
main="High elevation SNOTEL Data", lm=TRUE)
par(mfrow=c(1,1), oma=c(0,0,1,0))
corrplot.mixed(cor(snotel3[,-c(1:2)]), upper.col=c(1, "orange"),
lower.col=c(1, "orange"))
m_highEle <- lm(Snow.Depth~Elevation+Min.Temp+Max.Temp, data=snotel3)
print(summary(m_highEle))
hubble = read.csv('~/Downloads/sn_data_out_lg.csv',stringsAsFactors=TRUE)
# then do sn_data_out_lg.csv
distance = hubble[,2] # Mpc
vel = hubble[,1] # km/s
# errors
distErr = hubble[,3] # Mpc
# first things first, lets plot!
par(mfrow=c(1,1))
plot(distance, vel, pch=16,
col=30, xlab='Distance in Mpc',
ylab = 'Recessional Velocity in km/s')
# plot errors, for fun
arrows(distance-distErr*0.5,vel,
distance+distErr*0.5,vel, length=0.05, angle=90, code=3)
# how linear is this thing?
R = cor(distance,vel)
#print(R)
# so, pretty linear
d2 = distance^2 # for lg
myLine = lm(formula = vel ~ distance+d2,
data = data.frame(d2,distance,vel),weights=1./distErr^2) #lg
print(R)
par(mfrow=c(2,1))
myResiduals = resid(myLine)
plot(myResiduals)
qqnorm(myResiduals)
qqline(myResiduals)
par(mfrow=c(2,2))
b0 = myLine$coefficients[1] # intercept
b1 = myLine$coefficients[2] # slope
b2 = myLine$coefficients[3] # slope for x2, lg
x = seq(-0.25, 14000) # little negative just so we can see the points
myNewLine = b0 + b1*x + b2*x**2 # lg
plot(x, myNewLine, type='l', col="green", xlab="Distance in Mpc", ylab="Resessional Velocity in km/s")
points(distance, vel, pch=16, col=30) # over plot observation points
# plot errors
arrows(distance-distErr*0.5, vel,
distance+distErr*0.5,vel,length=0.05, angle=90, code=3)
plot(myLine, which=1) # Residuals plot
plot(myLine, which=2) # qq-norm plot
plot(myLine, which=5) # residuals vs. leverage
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
snotel_s
View(snotel_s)
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
View(snotel2)
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
print(mfull)
outlier_9th = snotel2[c(9),] # pulling one row
outlier_9th
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_mlr.R')
#install.packages("car")
require(car)
print(vif(mfull_take2)) # VIF of our model without the outlier point
print(sqrt(vif(mfull_take2)))
elev = lm(Elevation~Min.Temp+Max.Temp, data=snotel2[-9,])
# physically: this doesn't make sense, but it will show us the strength
#  of the linear relationship between our explanitory variables
print(summary(elev))
print(vif(mfull_take2)[1])
vifEl = 1.0/(1.0-summary(elev)$r.squared)
print(vifEl)
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
View(hubble)
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
help(arrows)
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
summary(fit2)
summary(fit1)
print(fit2$coefficients[2])
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week12/inClass_hubble_part2.R')
