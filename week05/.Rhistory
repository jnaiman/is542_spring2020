x = seq(-3,3,length=200) # plotting normal dist. -3,3 SD
y1 = dnorm(x, mean=0, sd=1)
plot(x,y1, type='l', ylim=c(0,2), ylab='Normal Distributions')
# overplot a few other normal distributions
y2 = dnorm(x, mean=0, sd=0.5)
par(new=TRUE) # for overplotting
plot(x, y2, type='l', col='red', ylim=c(0,2), ylab="")
# so first, as is always a good example,
# lets plot!
x = seq(-6,6,length=200)
mean_dist = 1.0
sd_dist = 0.5
# note here: I'm calling the dnorm function directly in the "y" data position of this function
#  this is instead of doing "y = dnorm..."
# Its just us being fancy :)
plot(x,dnorm(x,mean=mean_dist,sd=sd_dist),ylim=c(0,1.0), type='l')
abline(v=2.5,col="red")
Zscore = (2.5 - mean_dist)/sd_dist
print(Zscore)
# As always, lets start by plotting
mean_dist2 = 0.5
sd_dist2 = 2.0
par(new=TRUE) # overplot on our original axis
plot(x,dnorm(x,mean=mean_dist2,sd=sd_dist2),col="blue",ylim=c(0,1.0), type='l')
Zscore2 = (2.5-mean_dist2)/sd_dist2
print(Zscore2)
#
# ANS:
# (i) Plot:
#  Run # 1: "mean of 11cm and an SD of 2.0cm"
x = seq(5,15,length=200)
plot(x,dnorm(x,mean=11,sd=2), type='l', ylim=c(0,0.2)) # further out for run #1
par(new=TRUE)
#  Run # 2: "mean of 10 cm and an SD of 4.0 cm"
plot(x,dnorm(x,mean=10,sd=4),col="blue", type='l', ylim=c(0,0.2))
abline(v=9.0,col="red")
legend("topright", c("Run 1", "Run 2"), col=c("black","blue"), lw=1)
# But lets do the calculation to be sure
Z1 = (9.0-11)/2.0 # -1.0
Z2 = (9.0-10)/4.0 # -0.25
print(c("Run 1", "Run 2"))
print(c(Z1,Z2))
x = seq(-3,3, length=10)
# Let's make a triangle.
# And let's say the triangle goes from -3 to +3 in x & 0-1 in y.
# We can use our sequence to plot this.
plot(NULL,xlim=c(-3,3),ylim=c(0,1)) # sets up axes, plots nothing.
# Triangle will be defined by 3 verticies:
# (-3, 0), (0, 1), (3, 0)
xvertices = c(-3, 0, 3) # where x "hits" for each vertex
yvertices = c(0, 1, 0) # where y "hits" for each vertex
polygon(xvertices, yvertices,col="red") # plots on top of previous plot
# Lets try overplotting a little rectangle with bottom vertex at
#  x = (-1,1), y = (0.4,0.6)
xvertices = c(-1, -1, 1, 1)
yvertices = c(0.4, 0.6, 0.6, 0.4)
polygon(xvertices, yvertices, col="blue")
source('~/Downloads/plot_polygons.R')
# Let's recall the sum under the curve of our normal probability distribution has to == 1.
# Given the laws of probability, we can associate every Zscore with a percentile.
# lets go back to our toy example of a "normal" normal distribution centered a 0, with SD=1
x = seq(-3,3,length=200)
y = dnorm(x,mean=0,sd=1)
plot(x,y,type='l')
# What is the Zscore for x=0?
Zscore = (0-0)/1 # = 0
# We can plot:
abline(v=Zscore, col='red')
# First, lets plot with a polygon.
# Lets make sure we are only giving vertices up to Zscore = 0.
x2 = seq(-3, Zscore,length=100) # sequence "up to" our Zscore of interest
y2 = dnorm(x2, mean=0, sd=1) # y-values from dnorm
draw_polygon(x2,y2)
# The above call to polygon might seem a little confusing and weird at first.  This is just
print(pnorm(Zscore,mean=0,sd=1))
plot(x,y,type='l')
Zscore_of_interest = -2
x2 = seq(-3, Zscore_of_interest,length=100)
y2 = dnorm(x2, mean=0, sd=1)
draw_polygon(x2,y2)
# Before calling pnorm, what percentage do you estimate this to be? **TAKE A MOMENT**
# print
print(pnorm(Zscore_of_interest,mean=0,sd=1))
# example with lower.tail=FALSE
plot(x,y,type='l')
x2 = seq(Zscore_of_interest,3,length=100)
y2 = dnorm(x2,mean=0,sd=1)
# Before we where drawing "up to" our Z-score, now we'll draw "starting from" our Z-score:
draw_polygon(x2,y2)
print(1-pnorm(Zscore_of_interest,mean=0,sd=1))
# (ii) We can also explicity tell pnorm to use the "upper tail" of the distribution:
print(pnorm(Zscore_of_interest,mean=0,sd=1,lower.tail=FALSE))
par(mfrow=c(1,1))
x = seq(-3,3,length=200)
y = dnorm(x,mean=0,sd=1)
plot(x,y,type='l')
x2 = seq(-1,1,length=100)
y2 = dnorm(x2,mean=0,sd=1)
draw_polygon(x2,y2)
print(pnorm(1.0,mean=0,sd=1)-pnorm(-1.0,mean=0,sd=1))
# A1:
par(mfrow=c(1,2)) # 2 plots
# Plot SATs
x=seq(800,2200,length=200)
plot(x,dnorm(x,mean=1500,sd=300),type='l', ylab='SAT')
abline(v=1750,col="blue")
# Plot ACTs
x=seq(12,36,length=200)
plot(x,dnorm(x,mean=24,sd=3.5),type='l', ylab='ACT')
abline(v=31,col="red")
# NOTE: here I'm assuming the max scores for each are effectively infinite, an ok approximation here
Z_sat = (1750-1500)/300
Z_act = (31-24)/3.5
print('SAT ACT')
print(c(Z_sat,Z_act))
# 0.833 < 2.0
# ACT
x=seq(12,36,length=200)
plot(x,dnorm(x,mean=24,sd=3.5),type='l', ylab='ACT')
# ACT Percentile
x2 = seq(12,31,length=200)
y2 = dnorm(x2,mean=24,sd=3.5)
draw_polygon(x2,y2)
# A3
par(mfrow=c(1,2)) # 2 plots
# SAT
x=seq(800,2200,length=200)
plot(x,dnorm(x,mean=1500,sd=300),type='l', ylab='SAT')
# SAT Percentile
x2 = seq(800,1750,length=200)
y2 = dnorm(x2,mean=1500,sd=300)
draw_polygon(x2,y2)
# ACT
x=seq(12,36,length=200)
plot(x,dnorm(x,mean=24,sd=3.5),type='l', ylab='ACT')
# ACT Percentile
x2 = seq(12,31,length=200)
y2 = dnorm(x2,mean=24,sd=3.5)
draw_polygon(x2,y2)
# A4:
print('SAT, ACT - percentiles')
print(c(pnorm(1750,mean=1500,sd=300),pnorm(31,mean=24,sd=3.5)))
# much higher percentile for ACT
# As always, let's start with plotting a distribution:
par(mfrow=c(1,1)) # just to re-set things
x=seq(-3,3,length=200)
y=dnorm(x,mean=0,sd=1)
plot(x,y,type="l")
percentile = 0.40 # 40%
# We can use the function "qnorm" like we've been using dnorm and pnorm, but
#     now it will give us the Zscore corresponding to our percentage
Zscore_40 = qnorm(percentile,mean=0,sd=1)
source('~/Downloads/plot_polygons.R')
x=seq(-3,Zscore_40,length=100)
y=dnorm(x,mean=0,sd=1)
draw_polygon(x,y)
text(-1,0.1,"0.40") # first, let's plot text on our plot
# And we can put a nice little arrow for fun
arrows(0.5,0.1,-0.2,0,length=.15)
text(0.75,0.12,Zscore_40)
boundary <- read_sf("/Users/jillnaiman/trial-lesson_ag/_episodes_rmd/data/boundary.gpkg")
library(sf)
library(fasterize)
library(gstat)
library(raster)
library(rjson)
library(httr)
library(rgdal)
library(rgeos)
library(maptools)
library(knitr)
library(tmap)
library(ggplot2)
library(gridExtra)
library(measurements)
library(knitr)
library(httr)
boundary <- read_sf("/Users/jillnaiman/trial-lesson_ag/_episodes_rmd/data/boundary.gpkg")
boundary
# is it normal?
# with FISH DATA!!
# lets look back at our fish data to see if we can find anything
# interesting
fishdata = read.csv("~/Downloads/undata_fish.csv")
fishdata = read.csv("~/Downloads/undata_fish_2020.csv")
# lets plot some stuff
par(mfrow=c(1,2)) # do a 1x2 plots (2 plots per page)
# what about a log scale?
# plot #2
hist(log10(fishdata$Trade..USD.), xlab = "All Trade in log10($USD)")
qqnorm(log10(fishdata$Trade..USD.))
qqline(log10(fishdata$Trade..USD.))
library(MASS)
fit <- fitdistr(log10(trade_usd), "normal")
para <- fit$estimate
print(para) # prints mean & standard deviation
library(MASS)
fit <- fitdistr(log10(fishdata$Trade..USD.), "normal")
para <- fit$estimate
print(para)
par(mfrow=c(1,1))
hist(log10(fishdata$Trade..USD.), xlab = "All Trade in log10($USD)", prob=TRUE) # the prob=TRUE normalizes the distribution
x = seq(0,10,length=200)
curve(dnorm(x, para[1], para[2]), col = "red", add = TRUE)
help(dnorm)
source('~/.active-rstudio-document')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
help(pnorm)
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05_part2.R')
source('~/Dropbox/teaching/stats_spring_2020/week05/inClass_week05_part2.R')
library(MASS) # loading the "MASS" library of data & functions
fit = fitdistr(log10(fishdata$Trade..USD.), "normal")
para = fit$estimate
print(para)
# plot our distribution of fishdata & this fit
par(mfrow=c(1,1)) # single plot
hist(log10(fishdata$Trade..USD.), xlab='Trade in log(USD)')
# plot our distribution of fishdata & this fit
par(mfrow=c(1,1)) # single plot
hist(log10(fishdata$Trade..USD.), xlab='Trade in log(USD)')
# overplot my best fit normal model
x = seq(0, 10, length=200)
# to overplot we'll use the "curve" function
curve(dnorm(x, mean=para[1], sd=para[2]), col='red', add=TRUE)
# plot our distribution of fishdata & this fit
par(mfrow=c(1,1)) # single plot
hist(log10(fishdata$Trade..USD.), xlab='Trade in log(USD)',
prob=TRUE)
# overplot my best fit normal model
x = seq(0, 10, length=200)
# to overplot we'll use the "curve" function
curve(dnorm(x, mean=para[1], sd=para[2]), col='red', add=TRUE)
factorial(3)
3*2*1
choose(7,3)
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
spatial <- as(ssurgo$spatial, "sf")
spatial <- dplyr::rename(spatial, musym = MUSYM)
spatial <- merge(spatial, names, by = "musym")
names <- ssurgo$tabular$muaggatt
spatial <- as(ssurgo$spatial, "sf")
spatial <- dplyr::rename(spatial, musym = MUSYM)
spatial <- merge(spatial, names, by = "musym")
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES')
st_write(spatial, "ssurgo.gpkg")#, layer_options = 'OVERWRITE=YES')
st_write(spatial, "ssurgo.gpkg")#, layer_options = 'OVERWRITE=YES')
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES')
spatial
n = 1000
d = data.frame(a = 1:n, X = rnorm(n,1,1), Y = rnorm(n,1,1))
mp1 = st_as_sf(d, coords = c("X","Y"))
st_write(mp1, dsn="dat1.gpkg")
st_write(spatial, dsn="ssurgo.gpkg", layer_options = 'OVERWRITE=YES')
d
help(st_write)
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES', delete_layer=TRUE)
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES', factorsAsCharacter=FALSE)
st_write(ssurgo, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES', factorsAsCharacter=FALSE)
spatial
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES', factorsAsCharacter=FALSE)
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
source('~/Dropbox/agriculture_SC_workshop_Feb2020/trial_03.R')
st_write(spatial, "ssurgo.gpkg", layer_options = 'OVERWRITE=YES',update=TRUE)#, factorsAsCharacter=FALSE)
st_write(spatial, "ssurgo.gpkg")#, layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg")#, layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
st_write(ssurgo, "/Users/jillnaiman/Downloads/ssurgo.gpkg")#, layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
help(st_write)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg", driver="GPKG")#, layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg", driver="GPKG", delete_dsn=TRUE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg", driver="GPKG", delete_dsn=TRUE, overwrite=TRUE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg", driver="GPKG", delete_dsn=TRUE, overwrite=TRUE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg",
driver="GPKG", delete_dsn=TRUE)
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg",
driver="GPKG", delete_dsn=TRUE, layer_options = "GEOMETRY=AS_WKT")
st_write(st_as_sf(spatial), "/Users/jillnaiman/Downloads/ssurgo.gpkg",
driver="GPKG", delete_dsn=TRUE, layer_options = "GEOMETRY=AS_WKT")
st_write(st_as_sf(spatial), "/Users/jillnaiman/Downloads/ssurgo.gpkg",
driver="GPKG", delete_dsn=TRUE,
layer_options = c("OVERWRITE=yes", "LAUNDER=true"))
spatial
spatial.columns
names(spatial)
any(duplicated(toupper(names(spatial))))
which(duplicated(toupper(names(spatial))))
names(spatial)[43]
spatial <- as(ssurgo$spatial, "sf")
#spatial <- dplyr::rename(spatial, musym = MUSYM)
#spatial <- dplyr::rename(spatial, mukey = MUKEY)
spatial <- merge(spatial, names, by = "musym")
spatial <- as(ssurgo$spatial, "sf")
spatial <- dplyr::rename(spatial, musym = MUSYM)
spatial <- dplyr::rename(spatial, mukey = MUKEY)
spatial <- merge(spatial, names, by = "musym")
st_write(spatial, "/Users/jillnaiman/Downloads/ssurgo.gpkg", driver="GPKG")#, layer_options = 'OVERWRITE=YES')#, factorsAsCharacter=FALSE)
help("get_ssurgo")
