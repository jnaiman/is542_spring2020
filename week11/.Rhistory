install.packages(c("manipulate", "tigerstats"))
par(mfrow=c(1,1))
# first, lets get a feel for how this works interactively
#install.packages("manipulate") # run once
#install.packages("tigerstats") # run once
# make sure all packages are loaded
require(tigerstats)
require(manipulate)
FindRegLine()
# read in data
#BB <- read.csv("http://www.math.montana.edu/courses/s217/documents/beersbac.csv")
# OR:
BB = read.csv('/Users/jillnaiman/Downloads/beersbac.csv')
#print(BB)
Beers = BB$Beers
BAC = BB$BAC
plot(Beers, BAC, pch=16, col=30)
plot(BAC~Beers, data=BB, pch=16, col=30)
R = cor(Beers,BAC)
print(R)
# ok!  Lets get to actually fitting a line to this relation
myLine = lm(formula = BAC ~ Beers, data = BB)
# NOTE: it depends on which is "X" and which is "Y" variable
#  the above statment implies that BAC depends on Beers
#  (beer is explanitory)
#  and not the other way around
print(summary(myLine))
abline(myLine,col="blue")
# Maybe we want to extract the coefficients and plot our own line somewhere.
# We can do this with:
b0 = myLine$coefficients[1] # intercept
b1 = myLine$coefficients[2] # slope
x = seq(0, 100) # # of beers
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green")
abline(h=0.4, col="blue") # note, this is an average, a heavy drinker can get up to about 0.8
points(Beers, BAC, pch=16, col=30)
myLineFunction = function(xInput){
return(b0 + b1*xInput)
}
print(myLineFunction(4.5))
x = seq(0,20)
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green")
# Another thing we can note is that for 0 beers the BAC measurement is
#   negative, i.e. there is a negative blood alcohol level projected.
# Of course, this doesn't make sense - at zero beers, there should be
# about 0% blood alcohol level.
# Let's overplot our points again and take a look
points(Beers, BAC, pch=16, col=30)
myResiduals = resid(myLine)
plot(myResiduals)
abline(h=0.0, col="red")
# We can also check if our residuals are normal (one of our fit conditions)
qqnorm(myResiduals)
qqline(myResiduals)
# so, we can see that our residuals are nearly normal
# Maybe we want to plot our line, the fit, and the residuals
#par(mfrow=c(2,2))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE)) # this makes a 2x2 or 4 plots and makes 1 on the top row
x = seq(1, 10)
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green", xlab="Number of Beers", ylab="BAC")
points(Beers, BAC, pch=16, col=30) # over plot observation points
plot(myLine, which=1) # Residuals plot
plot(myLine, which=2) # qq-norm plot
print(Beers)
R2 = R*R
print(R2)
par(mfrow=c(2,2))
x = seq(1, 10)
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l',
col="green", xlab="Number of Beers", ylab="BAC",
ylim=c(0,0.2))
points(Beers, BAC, pch=16, col=30) # over plot observation points
plot(myLine, which=1) # Residuals plot
plot(myLine, which=2) # qq-norm plot
plot(myLine, which=4) # Outliers plot, Cooks distance
par(mfrow=c(2,2))
x = seq(1, 10)
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green",
xlab="Number of Beers", ylab="BAC",
ylim=c(0,0.2))
points(Beers, BAC, pch=16, col=30) # over plot observation points
plot(myLine, which=1) # Residuals plot
plot(myLine, which=2) # qq-norm plot
plot(myLine, which=5) # residuals vs. leverage
# Let's work through a few examples
par(mfrow=c(2,1))
plot(x, myNewLine, type='l', col="green",
xlab="Number of Beers", ylab="BAC",
ylim=c(0,0.2))
points(Beers, BAC, pch=16, col=30) # over plot observation points
plot(myLine, which=5) # residuals vs. leverage
# This again is our original plot.
# Now, lets add something at 10 beers to fake some outliers and see
#   how our pltos change
new_Beers = c(Beers, 10)
new_BAC = c(BAC, 0.01)
new_BB = data.frame(new_Beers,new_BAC)
# plot original l ine
plot(x, myNewLine, type='l', col="green", xlab="Number of Beers", ylab="BAC")
# construct new linear regression for new points
new_myLine = lm(formula = new_BAC ~ new_Beers, data = new_BB)
new_b0 = new_myLine$coefficients[1] # intercept
new_b1 = new_myLine$coefficients[2] # slope
points(new_Beers, new_BAC, pch=16, col=30) # over plot observation points
# now, lets plot a line using these coefficients
new_myNewLine = new_b0 + new_b1*x
lines(x, new_myNewLine, col="red")
plot(new_myLine, which=5) # residuals vs. leverage
# Finally, we can see how our "goodness of fit" parameters
#  change with these different points
new_R = cor(new_Beers,new_BAC)
print("New R, R^2")
print(c(new_R, new_R*new_R))
# got through this quickly - so do this as a class example activity
# looking at the *redshift* of the lights of galaxies => redder means receding further
#hubble = read.csv('~/Dropbox/stats_spring_2019/lectures/week10/hubble.csv',stringsAsFactors=TRUE)
hubble = read.csv('/Users/jillnaiman/Downloads/hubble.csv',stringsAsFactors=TRUE)
# looking at the *redshift* of the lights of galaxies => redder means receding further
hubble = read.csv('/Users/jillnaiman/Downloads/hubble.csv',stringsAsFactors=TRUE)
distance = hubble[,1]/1e6 # pc -> Mpc, PS: 1 pc = 30,856,776,000,000.00 km
# (~30 trillion km), or 3.26 LY
# and IS NOT A UNIT OF TIME (sorry star wars)
vel = hubble[,2] # km/s
# first things first, lets plot!
par(mfrow=c(1,1))
plot(distance, vel, pch=16, col=30, xlab='Distance in Mpc', ylab = 'Recessional Velocity in km/s')
# point out things < 0 are moving towards us
# how linear is this thing?
R = cor(distance,vel)
print(R)
myLine = lm(formula = vel ~ distance, data = data.frame(distance,vel))
print(summary(myLine))
# lets analize our residuals
par(mfrow=c(2,1))
myResiduals = resid(myLine)
plot(myResiduals)
# we can also check if our residuals are normal (one of our fit conditions)
qqnorm(myResiduals)
qqline(myResiduals)
par(mfrow=c(2,2))
b0 = myLine$coefficients[1] # intercept
b1 = myLine$coefficients[2] # slope
x = seq(-0.25, 2.5) # little negative just so we can see the points
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green", xlab="Distance in Mpc", ylab="Resessional Velocity in km/s")
points(distance, vel, pch=16, col=30) # over plot observation points
plot(myLine, which=1) # Residuals plot
plot(myLine, which=2) # qq-norm plot
plot(myLine, which=5) # residuals vs. leverage
hubbles_const = b1
print(hubbles_const) # in km/s/Mpc
beginning_of_time = 1.0/( hubbles_const * (1.0/3.08e19) ) # the last is just a unit conversion from Mpc to km
beginning_of_time_in_yrs = beginning_of_time/3.15e7/1e9 # into Gyrs aka billions of years
print(beginning_of_time_in_yrs)
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
BB
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
# Let's fit a line:
myLine = lm(formula = BAC ~ Beers, data = BB)
print(summary(myLine))
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
abline(h=0.4, col="blue") # average, heavy drinker this can be
x = seq(0, 20) # seq of new # of beers
myNewLine = b0 + b1*x
plot(x, myNewLine, type='l', col="green")
# overplot observed points
points(Beers, BAC, pch=16, col=30)
Beers
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
print(myLineFunction(4.5))
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
Beers
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
Beers
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
new_Beers = c(Beers, 10)
new_BAC = c(BAC, 0.01)
new_BB = data.frame(new_Beers, new_BAC)
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
new_myLine = lm(formula=new_BAC ~ new_Beers, data=new_BB)
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
plot(new_myLine, which=5)
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_linearRegression.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
View(hubble)
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
plot(distance, vel, pch=16, col=30,
xlab='Distance in Mpc', ylab='Recessional Velocity in km/s')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
beginning_of_time = 1.0/(hubble_const * (1.0/3.08e19)) # Mpc -> km
beginning_of_time
source('~/Dropbox/teaching/stats_spring_2020/week11/inClass_hubblesLaw.R')
