## TAKE YOUR TIME!!!! ####
# based on: http://r-statistics.co/Model-Selection-in-R.html
par(mfrow=c(1,1))
# ok, lets read in some ozone data
inputData = read.csv("~/Downloads/ozone2.csv", stringsAsFactors=F)
## TAKE YOUR TIME!!!! ####
# based on: http://r-statistics.co/Model-Selection-in-R.html
par(mfrow=c(1,1))
# ok, lets read in some ozone data
inputData = read.csv("~/Downloads/ozone2.csv", stringsAsFactors=F)
source('~/Dropbox/teaching/stats_spring_2019/lectures/week14/inClass_subset_selection.R')
#install.packages("glmnet") # install once
require(glmnet)
# recall: y = ozone reading, x = all other things (month, DOW, Humidity, temp, etc)
x = as.matrix(x)
# here we use glmnet to fit both ridge & lasso regressions
#  for ridge we set alpha = 0
#  for lasso, we set alpha = 1
# Fitting the model (Ridge: Alpha = 0)
# for glmnet
ridge.mod = glmnet(x, y, alpha = 0, standardize = TRUE)
# for plotting
#install.packages("plotmo")
require(plotmo)
plot_glmnet(ridge.mod)
inputData = read.csv("~/Downloads/ozone2.csv", stringsAsFactors=F)
head(inputData)
# If we can remember all the way back to week 11
#  (we were all so young and naive then)
#  we remember that we can make correlation plots!
require(psych)
pairs.panels(inputData, ellipse=F,
main="Scatterplot matrix Ozone Data", lm=T)
# ** click on *zoom* to pop out this plot **
#install.packages("glmnet") # install once
require(glmnet)
# recall: y = ozone reading, x = all other things (month, DOW, Humidity, temp, etc)
x = as.matrix(x)
# here we use glmnet to fit both ridge & lasso regressions
#  for ridge we set alpha = 0
#  for lasso, we set alpha = 1
# Fitting the model (Ridge: Alpha = 0)
# for glmnet
ridge.mod = glmnet(x, y, alpha = 0, standardize = TRUE)
# for plotting
#install.packages("plotmo")
require(plotmo)
plot_glmnet(ridge.mod)
###################
# Shrinkage Methods for parameter choice
###################
# Let's first check out some data we've worked with before: the ozone data:
inputData = read.csv("~/Downloads/ozone2.csv", stringsAsFactors=F)
head(inputData)
# Recall what we are looking at here.  We are looking at measurements of ozone levels (in mm) for
#  different time of the year, and days of the week under different conditions.
# Here Temp_sandburg is the temperature at Sandburg Air Force Base
# temp_elmonte is a measurement in el monte (near LA), CA in C?
# The "inversion" things are just related to when there is a state change in a gas
#  (so like from gas to liquid)
# If we can remember all the way back to week 7?
#  (we were all so young and naive then)
#  we remember that we can make correlation plots!
require(psych)
pairs.panels(inputData, ellipse=F,
main="Scatterplot matrix Ozone Data", lm=T)
# ** click on *zoom* to pop out this plot **
# Look at the "ozone reading" column and go down to see what it may be related too.
# It looks like pressure_height, the temperature measurements, and maybe inversion info
#  are strong predictors of ozone levels.  Not related to things like day of week or month,
#  some relation to month, but that could be colinear with temperature.
# This plot shows red-line linear fits.  Let's try using "shrinkage" methods
#   to select a subset of parameters.
#install.packages("glmnet") # install once
require(glmnet)
# To do this fit, we need to do a bit of formatting:
# Define the response variable, in this case we assume that is the ozone reading.
y = select(inputData, ozone_reading)
# formatting:
y = pull(y)
# all other variables are explainitory/predictor variables
x = select(inputData, -ozone_reading)
# can check out what x and y are.
head(x)
# Let's first check out some data we've worked with before: the ozone data:
inputData = read.csv("~/Downloads/ozone2.csv", stringsAsFactors=F)
head(inputData)
# Recall what we are looking at here.  We are looking at measurements of ozone levels (in mm) for
#  different time of the year, and days of the week under different conditions.
# Here Temp_sandburg is the temperature at Sandburg Air Force Base
# temp_elmonte is a measurement in el monte (near LA), CA in C?
# The "inversion" things are just related to when there is a state change in a gas
#  (so like from gas to liquid)
# If we can remember all the way back to week 7?
#  (we were all so young and naive then)
#  we remember that we can make correlation plots!
require(psych)
pairs.panels(inputData, ellipse=F,
main="Scatterplot matrix Ozone Data", lm=T)
# ** click on *zoom* to pop out this plot **
# Look at the "ozone reading" column and go down to see what it may be related too.
# It looks like pressure_height, the temperature measurements, and maybe inversion info
#  are strong predictors of ozone levels.  Not related to things like day of week or month,
#  some relation to month, but that could be colinear with temperature.
# This plot shows red-line linear fits.  Let's try using "shrinkage" methods
#   to select a subset of parameters.
#install.packages("glmnet") # install once
require(glmnet)
# To do this fit, we need to do a bit of formatting:
# Define the response variable, in this case we assume that is the ozone reading.
y = select(inputData, ozone_reading)
# formatting:
y = pull(y)
# all other variables are explainitory/predictor variables
x = select(inputData, -ozone_reading)
# formatting:
# recall: y = ozone reading, x = all other things (month, DOW, Humidity, temp, etc)
x = as.matrix(x)
# here we use glmnet to fit both ridge & lasso regressions
#  for ridge we set alpha = 0
#  for lasso, we set alpha = 1
# Fitting the model (Ridge: Alpha = 0)
# for glmnet
ridge.mod = glmnet(x, y, alpha = 0, standardize = TRUE)
# for plotting
#install.packages("plotmo")
require(plotmo)
plot_glmnet(ridge.mod)
# We can also plot the lasso regression model.
lasso.mod = glmnet(x,y, alpha=1)
plot_glmnet(lasso.mod)
# To copy the ISL figures, we can also include the plot as
#   a function of the L1 norm pretty easily:
par(mfrow=c(1,2))
plot_glmnet(lasso.mod)
plot_glmnet(lasso.mod,xvar="norm")
cv.lasso = cv.glmnet(x, y, alpha=1)#, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
# Note: adapted from here: http://ricardoscr.github.io/how-to-use-ridge-and-lasso-in-r.html
#  can also check out: https://www.datacamp.com/community/tutorials/tutorial-ridge-lasso-elastic-net
cv.lasso = cv.glmnet(x, y, alpha=1)#, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
# what is the best Lambda to choose?
minLambda = max(c(cv.lasso$lambda.min-cv.lasso$lambda.1se, 0.0)) # incase min < 0
maxLambda = cv.lasso$lambda.min+cv.lasso$lambda.1se
outstr = paste("Lambda = ", toString(cv.lasso$lambda.min), ", interval =",
toString(minLambda),
" - ", toString(maxLambda))
print(outstr)
# Note: adapted from here: http://ricardoscr.github.io/how-to-use-ridge-and-lasso-in-r.html
#  can also check out: https://www.datacamp.com/community/tutorials/tutorial-ridge-lasso-elastic-net
cv.lasso = cv.glmnet(x, y, alpha=1)#, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
# Note: adapted from here: http://ricardoscr.github.io/how-to-use-ridge-and-lasso-in-r.html
#  can also check out: https://www.datacamp.com/community/tutorials/tutorial-ridge-lasso-elastic-net
cv.lasso = cv.glmnet(x, y, alpha=1, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
help(cv.lasso)
help(cv.glmnet)
cv.glmnet
cv.lasso = cv.glmnet(x, y, alpha=1)#, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
help(cv.glmnet)
minLambda
maxLambda
cv.lasso$lambda.min
log(0.048)
log10(0.048)
pairs.panels(inputData, ellipse=F,
main="Scatterplot matrix Ozone Data", lm=T)
cv.lasso = cv.glmnet(x, y, alpha=1, standardize=TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
minLambda = max(c(cv.lasso$lambda.min-cv.lasso$lambda.1se, 0.0)) # incase min < 0
maxLambda = cv.lasso$lambda.1se
outstr = paste("Lambda = ", toString(cv.lasso$lambda.min), ", interval =",
toString(minLambda),
" - ", toString(maxLambda))
print(outstr)
# Let's plot what parameters are in our "best" model
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.1se))
abline(v=log(minLambda), lty=2)
abline(v=log(maxLambda), lty=2)
# Let's plot what parameters are in our "best" model
plot_glmnet(lasso.mod)
plot_glmnet(lasso.mod,xvar="norm")
abline(v=log(cv.lasso$lambda.1se))
abline(v=log(minLambda), lty=2)
abline(v=log(maxLambda), lty=2)
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.1se))
abline(v=log(minLambda), lty=2)
abline(v=log(maxLambda), lty=2)
lasso.mod_best = glmnet(x,y, alpha=1, lambda=cv.lasso$lambda.1se)
lasso.mod_best
coeff(cv.lasso)
coef(cv.lasso)
# Let's plot what parameters are in our "best" model
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.1se))
abline(v=log(minLambda), lty=2)
abline(v=log(maxLambda), lty=2)
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.min))
abline(v=log(cv.lasso$lambda.1se), lty=2)
lasso.mod_best = glmnet(x,y, alpha=1, lambda=cv.lasso$lambda.1se)
summary(lasso.mod_best)
plot_glmnet(lasso.mod_best)
lasso.mod_best
# We can also see these coefficients from the defaults of:
coef(cv.lasso)
print(coef(lasso.mod_best))
# pick new Xvec
month = 12
humidity = 60 # units?
temp_S = 40
temp_E = 45
ibh = 1000
# # rest are zero, since they don't matter
dom = 0.0
dow = 0.0
ph = 0.0
ws = 0.0
pg = 0.0
it = 0.0
vis = 0.0
xvec = c(month, dom, dow, ph, ws, humidity, temp_S, temp_E, ibh, pg, it, vis)
myPrediction = predict(lasso.mod_best, rbind(xvec))
# lets put this new plot with just our new variables
par(mfrow = c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col="red")
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col="red")
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col="red")
plot(inputData$Temperature_ElMonte, inputData$ozone_reading)
points(temp_E, myPrediction, col="red")
plot(inputData$Inversion_base_height, inputData$ozone_reading)
points(ibh, myPrediction, col="red")
snotel_s = read.csv("~/Downloads/snotel_s.csv")
snotel2 = snotel_s[,c(1:2,4:6,3)] #Reorders columns for nicer pairs.panel display
pairs.panels(snotel2[,-c(1:2)], ellipse=F,
main="Scatterplot matrix of SNOTEL Data", lm=TRUE)
ys = select(snotel2, Snow.Depth)
ys = pull(ys)
# all other variables are explainitory/predictor variables
xs = select(snotel2, -c(Snow.Depth,Station,ID))
xs = as.matrix(xs)
ridge.mod.s = glmnet(xs, ys, alpha = 0, standardize = TRUE)
par(mfrow=c(1,1))
plot_glmnet(ridge.mod.s)
lasso.mod.s = glmnet(xs,ys, alpha=1)
par(mfrow=c(1,2))
plot_glmnet(lasso.mod.s)
plot_glmnet(lasso.mod.s,xvar="norm")
source('~/Dropbox/teaching/stats_spring_2019/lectures/week15/prep_pca_week15.R')
source('~/Dropbox/teaching/stats_spring_2019/lectures/week15/prep_pca_week15.R')
source('~/Dropbox/teaching/stats_spring_2019/lectures/week15/prep_pca_week15.R')
##### BACK TO SLIDES FOR PCA! #####
# reference: https://www.datacamp.com/community/tutorials/pca-analysis-r
library(stats)
data(mtcars)
head(mtcars)
#mpg: Fuel consumption (Miles per (US) gallon): more powerful
#      and heavier cars tend to consume more fuel.
#cyl: Number of cylinders: more powerful cars often have more cylinders
#disp: Displacement (cu.in.): the combined volume of the engine's cylinders
#hp: Gross horsepower: this is a measure of the power generated by the car
#drat: Rear axle ratio: this describes how a turn
#     of the drive shaft corresponds to a turn of the wheels.
#     Higher values will decrease fuel efficiency.
#wt: Weight (1000 lbs): pretty self-explanatory!
#qsec: 1/4 mile time: the cars speed and acceleration
#vs: Engine block: this denotes whether the vehicle's engine
# is shaped like a "V", or is a more common straight shape.
#am: Transmission: this denotes whether the car's transmission
#     is automatic (0) or manual (1).
#gear: Number of forward gears: sports cars tend to have more gears.
#carb: Number of carburetors: associated with more powerful engines
# exclude vs and am since they are catagorical
mtcars_min = mtcars[,c(1:7,10,11)]
mtcars.pca = prcomp(mtcars_min, center = TRUE,scale. = TRUE)
summary(mtcars.pca)
print(mtcars.pca$x)
par(mfrow=c(1,1))
PoV = mtcars.pca$sdev^2/sum(mtcars.pca$sdev^2)
plot(PoV, type='l')
#install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(mtcars.pca)
ggbiplot(mtcars.pca, labels=rownames(mtcars))
mtcars.country = c(rep("Japan", 3), rep("US",4),
rep("Europe", 7),rep("US",3),
"Europe", rep("Japan", 3), rep("US",4),
rep("Europe", 3), "US", rep("Europe", 3))
# choices here specifis plotting pc1 and pc2
ggbiplot(mtcars.pca,ellipse=TRUE, choices=c(1,2),
labels=rownames(mtcars), groups=mtcars.country)
source('~/Dropbox/teaching/stats_fall_2019/week14/inClass_model_selection.R')
head(inputData)
source('~/Dropbox/teaching/stats_fall_2019/week14/inClass_model_selection.R')
require(glmnet)
require(glmnet)
# just some formatting
# grabbing my "response" variable - assumption that its ozone layer
y = select(inputData, ozone_reading)
y = pull(y)
# also grab the explanatory variables
x = select(inputData, -ozone_reading)
# formatting (gloss over this for now)
x = as.matrix(x)
y
x
ridge.mod = glmnet(x, y, alpha=0, standardize = FALSE)
ridge.mod
require(plotmo)
plot_glmnet(ridge.mod)
pairs.panels(inputData, ellipse=F, main='Scatterplot of Ozone Data', lm=T)
ridge.mod = glmnet(x, y, alpha=0, standardize = TRUE)
plot_glmnet(ridge.mod)
# Ridge, alpha = 0
ridge.mod = glmnet(x, y, alpha=0, standardize = FALSE)
# to plot
#install.packages("plotmo")
require(plotmo)
plot_glmnet(ridge.mod)
ridge.mod = glmnet(x, y, alpha=0, standardize = TRUE)
# to plot
#install.packages("plotmo")
require(plotmo)
plot_glmnet(ridge.mod)
lasso.mod = glmnet(x, y, alpha=1, standardize = TRUE)
plot_glmnet(lasso.mod)
par(mfrow=c(1,2))
plot_glmnet(lasso.mod)
plot_glmnet(lasso.mod, xvar="norm")
log(0.1)
cv.lasso = cv.glmnet(x, y, alpha=1)
par(mfrow=c(1,1))
plot(cv.lasso)
cv.lasso = cv.glmnet(x, y, alpha=1, standardize = TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
cv.lasso$lambda.min
log(0.0365)
cv.lasso$lambda.1se
plot_glmnet(lasso.mod)
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lamda.min)) # absolute min
abline(v=log(cv.lasso$lambda.1se), lty=2)
log(cv.lasso$lamda.min)
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.min)) # absolute min
abline(v=log(cv.lasso$lambda.1se), lty=2)
lasso.mod_best = glmnet(x, y, alpha=1, lambda=cv.lasso$lambda.1se)
cv.lasso$lambda
plot(cv.lasso)
lasso.mod_best = glmnet(x, y, alpha=1, lambda=cv.lasso$lambda.1se)
lasso.mod_best = glmnet(x, y, alpha=1,
lambda=cv.lasso$lambda.1se,
standardize = TRUE)
# we'll replot our "lamda" vs. parameter inclusion
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.min)) # absolute min
abline(v=log(cv.lasso$lambda.1se), lty=2)
coef(cv.lasso) # grabbing directly from our CV
cv.lasso = cv.glmnet(x, y, alpha=1, standardize = TRUE)
par(mfrow=c(1,1))
plot(cv.lasso)
# we have options for our "best" lambda
# (i) is the lamda that minimizes our MSE (RSS)
# (ii) all lamdas within 1 SE of our minimum lamda are good choices
#       and we want to go with the one that gives us the *least*
#       number of parameters -> chosing the least complex model
#       helps with any issues of overfitting
# (i) is cv.lasso$lamda.min, (ii) cv.lasso$lamda.1se
# we'll replot our "lamda" vs. parameter inclusion
plot_glmnet(lasso.mod)
abline(v=log(cv.lasso$lambda.min)) # absolute min
abline(v=log(cv.lasso$lambda.1se), lty=2)
# for a variety of reasons, we are going to use our
#  "best" lambda as lambda.1se
# We can grab our "best" lasso model using our "best" lambda
lasso.mod_best = glmnet(x, y, alpha=1,
lambda=cv.lasso$lambda.1se,
standardize = TRUE)
# So we could use this to predict things
# First, we'll check out our coefficients, i.e. what slopes we
#  are including in this model
coef(cv.lasso) # grabbing directly from our CV
coef(lasso.mod_best)
head(x)
myPrediction = predict(lasso.mod_best, rbind(xvec))
# non-zero slopes for the following parameters:
# Month, Humidity, Temperature_Sandburg, Temperature_ElMonte
#   Inversion_base_height, Pressure_gradient
# Pick a new X-vector, i.e. new list of explanatory variables
month = 12 # Dec
humidity = 60 # units?
temp_S = 40 # F, Sandburg Temp
temp_E = 45 # F, El Monte Temp
ibh = 1000 # units?  Meters?
pg = -15 # units? atmopsheres? log(atm)
# rest of them don't matter
dom = 0 # day of month
dow = 0 # day of week
ph = 0 # pressure height
ws = 0 # wind speed
it = 0 # inversion temp
vis = 0 # visibility
# do formatting to be able to use predict function
# first: new vector of explantory variables
xvec = c(month, dom, dow, ph, ws, humidity, temp_S,
temp_E, ibh, pg, it, vis)
# use these to make prediction
myPrediction = predict(lasso.mod_best, rbind(xvec))
myPrediction
# plot w/rt its place with other variables
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# plot w/rt its place with other variables
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
# plot w/rt its place with other variables
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col='red')
# plot w/rt its place with other variables
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col='red')
plot(inputData$Temperature_ElMonte, inputData$ozone_reading)
points(temp_E, myPrediction, col='red')
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col='red')
plot(inputData$Temperature_ElMonte, inputData$ozone_reading)
points(temp_E, myPrediction, col='red')
plot(inputData$Inversion_base_height, inputData$ozone_reading)
point(ibh, myPrediction, col='red')
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col='red')
plot(inputData$Temperature_ElMonte, inputData$ozone_reading)
points(temp_E, myPrediction, col='red')
plot(inputData$Inversion_base_height, inputData$ozone_reading)
points(ibh, myPrediction, col='red')
# plot w/rt its place with other variables
par(mfrow=c(2,3))
plot(inputData$Month, inputData$ozone_reading)
points(month, myPrediction, col='red')
# now with rest of parameters
plot(inputData$Humidity, inputData$ozone_reading)
points(humidity, myPrediction, col='red')
plot(inputData$Temperature_Sandburg, inputData$ozone_reading)
points(temp_S, myPrediction, col='red')
plot(inputData$Temperature_ElMonte, inputData$ozone_reading)
points(temp_E, myPrediction, col='red')
plot(inputData$Inversion_base_height, inputData$ozone_reading)
points(ibh, myPrediction, col='red')
plot(inputData$Pressure_gradient, inputData$ozone_reading)
points(pg, myPrediction, col='red')
x=model.matrix(Salary∼.,Hitters)[,-1]
y=Hitters$Salary
library(ISLR)
library(glmnet)
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
library(ISLR)
library(glmnet)
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid, standardize=FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
